<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Be My SpaceTime - report</title><link href="https://avinal.space/" rel="alternate"></link><link href="https://avinal.space/feeds/report.atom.xml" rel="self"></link><id>https://avinal.space/</id><updated>2021-08-19T23:07:00+05:30</updated><subtitle>눈치</subtitle><entry><title>Google Summer of Code 2021</title><link href="https://avinal.space/posts/report/final-evaluation.html" rel="alternate"></link><published>2021-08-19T23:07:00+05:30</published><updated>2021-08-19T23:07:00+05:30</updated><author><name>Avinal</name></author><id>tag:avinal.space,2021-08-19:/posts/report/final-evaluation.html</id><summary type="html">&lt;p class="first last"&gt;This is the final report of my Google Summer of Code 2021 at The FOSSology Project.&lt;/p&gt;
</summary><content type="html">&lt;style&gt;
.rd {color:red;font-weight:bold}
.gr{color:green;font-weight:bold}
.or{color:orange;font-weight:medium}
ul{margin-bottom:0}
&lt;/style&gt;&lt;div class="section" id="the-cmake-build-system"&gt;
&lt;h2&gt;The CMake Build system&lt;/h2&gt;
&lt;p&gt;FOSSology is quite an old and mature project. The project has been using bare metal &lt;strong&gt;Makefiles&lt;/strong&gt;. As the project is growing with new agents and modernization it was required to have a modern build system.&lt;/p&gt;
&lt;p&gt;The FOSSology is a suite of well-integrated and synchronized sub-projects (called agents) written in C, C++, and PHP. Most of the major agents are in C, C++ and that made CMake an obvious choice for a new build system for FOSSology. CMake is a versatile set of build, test, and packaging tools and is the most popular choice of C/C++ developers. CMake can be extended to create a build system for other languages too via custom scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-actions-ci-cd"&gt;
&lt;h2&gt;GitHub Actions CI/CD&lt;/h2&gt;
&lt;img alt="A CI Meme" class="float-md-right rounded border border-info ml-3" src="/images/ci.png" style="width: 350px;" /&gt;
&lt;p&gt;Since the FOSSology project moved on Github, it has used only the free Travis CI service for OSS projects.
At the time of writing Travis CI has reduced its free tier CI services. GitHub Actions provides faster builds. Since GitHub Actions is a fully managed service by GitHub, we don’t need to know how to scale and operate the infrastructure to run it.&lt;/p&gt;
&lt;p&gt;It is straightforward to use with GitHub because when we fork a repository, the actions automatically get forked. This allows you to test and build projects very efficiently and even run them closer to the developer. Also, you have readily available access to the GitHub API, making it more popular among developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements-over-previous-build-system-and-ci"&gt;
&lt;h2&gt;Improvements over previous build system and CI&lt;/h2&gt;
&lt;p&gt;The new build system and CI brings a lot of improvements and features. The list below describes them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CMake enforces out-of-source builds. This was already possible with the previous build system but not a strict requirement. This feature keeps the source code clean and makes cleaning the build artifacts easy. (Just remove the build folder :)&lt;/li&gt;
&lt;li&gt;One of the major improvements over the previous build system is faster build times. CMake generates parallel build-enabled configurations for all generators. In our tests, the new build system is at least twice as fast as the previous one. With further improvement in configuration, we will be able to further cut the build times.&lt;/li&gt;
&lt;li&gt;Previously FOSSology can only be built using &lt;em&gt;Unix Makefiles&lt;/em&gt;. With CMake, we can now use many other popular generators such as &lt;em&gt;Ninja&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Now it is also very flexible to choose different compilers. This will help support more platforms and architecture in the future. As of now, we are experimenting with Clang compilers.&lt;/li&gt;
&lt;li&gt;FOSSology is quite an old project and a lot of agent testing code was written in the last decade. Initially, none of them were compatible with the new build system, but we were able to hack most of the test code using better-improved methods. Test times have also improved.&lt;/li&gt;
&lt;li&gt;Migrating from Travis CI to GitHub Actions was another big move and for the most part, it removes the dependency on a third-party CI service. Along with that GitHub Actions provides better build times, tons of new features, and better integration with other GitHub services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="deliverables"&gt;
&lt;h2&gt;Deliverables&lt;/h2&gt;
&lt;div class="alert alert-info" role="alert"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Final Pull Request &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/pull/2075"&gt;#2075&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pull Request Branch &lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/buildsystem"&gt;avinal/feat/buildsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working Branch (individual commits) &lt;ul&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/cmake-buildsystem"&gt;avinal/feat/cmake-buildsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://github.com/avinal/fossology/tree/avinal/feat/testing"&gt;avinal/feat/testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Project Issue &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/issues/1913"&gt;#1913&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Project Discussion &lt;a class="badge badge-info" href="https://github.com/fossology/fossology/discussions/1931"&gt;#1931&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Weekly Reports&lt;ul&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://gsoc.avinal.space"&gt;Personal Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="badge badge-info" href="https://fossology.github.io/gsoc/docs/2021/buildsystem/"&gt;FOSSology Official Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CMake Build System Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils align-center"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;#&lt;/th&gt;
&lt;th class="head"&gt;Agents&lt;/th&gt;
&lt;th class="head"&gt;Build&lt;/th&gt;
&lt;th class="head"&gt;Install&lt;/th&gt;
&lt;th class="head"&gt;Testing&lt;/th&gt;
&lt;th class="head"&gt;Packaging&lt;/th&gt;
&lt;th class="head"&gt;Remarks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;adj2nest&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;buckets&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;cli&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;copyright&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;debug&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;decider&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;deciderjob&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;delagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;demomod&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Not Used)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;example_wc_agent&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Not Used)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;clib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;cpplib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;phplib&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 functional
test needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;maintagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;mimetype&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;monk&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;ninka&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="or"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="or"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;nomos&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;ojo&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 functional
test needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;pkgagent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;readmeoss&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;regexscan&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="or"&gt;NO&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;reportImport&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;reuser&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;reso&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;scheduler&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Tests needs
fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;softwareHeritage&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;spasht&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;spdx2&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1 Test failing
in CI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;unifiedreport&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;ununpack&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="rd"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Unit tests
needs fix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;wget_agent&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="gr"&gt;Functional&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="gr"&gt;Unit&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;span class="rd"&gt;UI&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;YES&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;GitHub Actions CI Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils align-center"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="70%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;#&lt;/th&gt;
&lt;th class="head"&gt;CI Tasks&lt;/th&gt;
&lt;th class="head"&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;build&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added Ubuntu 20.04 GCC 8, 9 and Clang, GCC 7 not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;c/cpp unit test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added, delagent, scheduler and ununpack not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;span class="gr"&gt;phpunit tests&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Added, delagent and scheduler  functional not working&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;span class="rd"&gt;cahching&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Not implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;span class="rd"&gt;source install&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Not implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(&lt;span class="gr"&gt;GREEN&lt;/span&gt;: COMPLETED, &lt;span class="rd"&gt;RED&lt;/span&gt;: INCOMPLETE, &lt;span class="or"&gt;ORANGE&lt;/span&gt;: NOT NEEDED/DEPRECATED)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-it-work-and-how-to-use-it"&gt;
&lt;h2&gt;How does it work and how to use it?&lt;/h2&gt;
&lt;div class="embed-responsive embed-responsive-16by9"&gt;
    &lt;iframe class="embed-responsive-item" src="/images/second-build.webm" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;The new build system retains the modular and hierarchical structure of the previous build system.  On the other hand, the new build system provides several new flags to control the build. The new build system forces out-of-source build instead of the previous in-source builds. This keeps the source clutter-free and reduces the chance of accidentally deleting source files. &lt;em&gt;Testing still needs some in-source artifacts, this will be solved once all the tests are fixed according to the new build system.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Each agent is a complete CMake sub-project with its independent configuration for building, installing, and testing. That means a single agent can be built and installed separately and even removed from the default build without breaking other builds. The directory structure is as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── build                           &lt;span class="c1"&gt;# temporary directory for build artifacts&lt;/span&gt;
├── cmake                           &lt;span class="c1"&gt;# CMake modules for FOSSology&lt;/span&gt;
│   ├── FoPackaging.cmake           &lt;span class="c1"&gt;# CMake Packaging configurations&lt;/span&gt;
│   ├── FoUtilities.cmake           &lt;span class="c1"&gt;# Custom CMake utilities&lt;/span&gt;
│   ├── FoVersionFile.cmake         &lt;span class="c1"&gt;# VERSION version.php CMake template file&lt;/span&gt;
│   ├── SetDefaults.cmake           &lt;span class="c1"&gt;# CMake defaults for this project&lt;/span&gt;
│   ├── TestInstall.make.in         &lt;span class="c1"&gt;# Template makefile for install during tests&lt;/span&gt;
│   └── VERSION.in                  &lt;span class="c1"&gt;# VERSION file template&lt;/span&gt;
├── src
│   ├── agent-1                     &lt;span class="c1"&gt;# Agent sub-project&lt;/span&gt;
│   │   ├── agent                   &lt;span class="c1"&gt;# Agent&amp;#39;s source code directory&lt;/span&gt;
│   │   │   ├── agent-source-code
│   │   │   └── CMakeLists.txt
│   │   ├── agent_tests             &lt;span class="c1"&gt;# Agent&amp;#39;s test directory&lt;/span&gt;
│   │   │   ├── Unit
│   │   │   ├── Functional
│   │   │   └── CMakeLists.txt
│   │   ├── ui                      &lt;span class="c1"&gt;# Agent&amp;#39;s UI source code&lt;/span&gt;
│   │   │   ├── templates
│   │   │   └── agent-ui-code
│   │   └── CMakeLists.txt          &lt;span class="c1"&gt;# Agent&amp;#39;s top-level CMake configuration&lt;/span&gt;
:   :
│   ├── other agents
:   :
│   └── CMakeLists.txt              &lt;span class="c1"&gt;# Source intermediate CMake configuration&lt;/span&gt;
:
├── other directories and files
:
└── CMakeLists.txt                  &lt;span class="c1"&gt;# FOSSology Top-level CMake configuration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;cmake&lt;/code&gt; directory contains customized CMake modules and templates for FOSSology. This directory is required for all the operations. The general workflow of the new build system as well as how to use it is described below.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Since the new build system is still in review. You must fork FOSSology and pull the &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/2075"&gt;#2075&lt;/a&gt; pull request branch. Once you are in FOSSology root, run these commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch https://github.com/avinal/fossology avinal/feat/buildsystem:buildsystem
git checkout buildsystem
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first step towards building is to create a temporary directory for storing intermediate files and build artifacts. By convention we use a directory named &lt;code&gt;build&lt;/code&gt;, but you can use any name. (&lt;strong&gt;NOTE: For testing do not use other names&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir build
&lt;span class="nb"&gt;cd&lt;/span&gt; build
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the next steps, we will configure the CMake project and generate the required configurations. You can use several flags to control the build. Given below are the flags available for this project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;table border="1" class="table table-sm table-hover table-bordered table-responsive docutils"&gt;
&lt;colgroup&gt;
&lt;col width="35%" /&gt;
&lt;col width="44%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;CMake Flags&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DCMAKE_INSTALL_PREFIX=&amp;lt;path&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sets the install prefix.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/usr/local&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DAGENTS=&amp;quot;agent1;agent2...&amp;quot;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Only configure these agents.&lt;/td&gt;
&lt;td&gt;ALL AGENTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DOFFLINE=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Controls vendor generation, ON=NO&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p class="first"&gt;&lt;strong&gt;-DCMAKE_BUILD_TYPE=&amp;lt;type&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class="last"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Controls build type aka
level optimisation&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RelWithDebInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MinSizeRel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DTESTING=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Controls testing config generation&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-DMONOPACK=&amp;lt;ON/OFF&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Package adj2nest and ununpack seperately&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OFF&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-GNinja&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Use Ninja instead of Unix Makefiles&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Unix MakeFiles&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are lots of inbuilt CMake command-line options you can see them in the official &lt;a class="reference external" href="https://cmake.org/cmake/help/v3.10/manual/cmake.1.html"&gt;documentation&lt;/a&gt;. Once you have chosen your flags we can now configure the project using the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# From build folder&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;name-of-build-directory&amp;gt;
cmake &amp;lt;flags&amp;gt; ..
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The next step is to build the project. You can use parallel jobs to build faster. For more options you can type &lt;code&gt;cmake --help&lt;/code&gt; or &lt;code&gt;make --help&lt;/code&gt; or &lt;code&gt;ninja --help&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common build command for all generators,&lt;/span&gt;
&lt;span class="c1"&gt;# Default number of parallel builds depends on generator used&lt;/span&gt;
cmake --build . --parallel &amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Unix Makefiles, no parallel build by default&lt;/span&gt;
make -j &amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Ninja, 8+ parallel build by default (depends on system)&lt;/span&gt;
ninja -j &amp;lt;no-of-processes&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installing is also as easy as building. You can choose to install only certain components even if you have built the whole project. If you directly invoke the install command without building the project, it will automatically build the project first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make install

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja install
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;While testing has some issues, most of the testing is working fine. For now, you must build and run any test from the FOSSology root directory only. You can choose to configure a single agent if you want to test one agent only. See &lt;code&gt;ctest --help&lt;/code&gt; for controlling test runs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common testing command&lt;/span&gt;
ctest --parallel &amp;lt;no-of-processes&amp;gt;

&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can package FOSSology, the packaging currently lacks copyright and conf files. But for testing purposes, you can use the following commands. Similar to installing, if you run the package command without building the project, it will automatically build the project first. See &lt;code&gt;cpack --help&lt;/code&gt; for more packaging options.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Common testing command&lt;/span&gt;
cpack

&lt;span class="c1"&gt;# For Unix Makefiles&lt;/span&gt;
make package

&lt;span class="c1"&gt;# For Ninja&lt;/span&gt;
ninja package
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="known-issues-and-drawbacks"&gt;
&lt;h2&gt;Known Issues and Drawbacks&lt;/h2&gt;
&lt;p&gt;Although the transition from Makefiles to CMake and Travis CI to GitHub Actions is almost complete and working as expected. But it is not free of drawbacks and issues. This section outlines the known issues at the time of writing.&lt;/p&gt;
&lt;img alt="A Bug Meme" class="float-md-right rounded border border-info ml-3" src="https://imgs.xkcd.com/comics/conference_question.png" style="width: 350px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Coverage builds may fail with linking errors.&lt;/li&gt;
&lt;li&gt;Packaging prefix is the same as the install prefix. This requires the developer to set the install prefix manually before packaging to produce packages with the correct directory structure.&lt;/li&gt;
&lt;li&gt;Testing and packaging must be used from the FOSSology root directory. Not doing so may or may not configure the project as intended.&lt;/li&gt;
&lt;li&gt;Previously tests were written hardcoded for the Makefiles. But new build system requires all artifacts to be generated in a separate directory. This required me to add symbolic links wherever a generated script or file is expected. Tests can still leave some artifacts inside source folders.&lt;/li&gt;
&lt;li&gt;There is no easy way to install a particular agent from the FOSSology root directory.&lt;/li&gt;
&lt;li&gt;Packages don't contain copyright, readme, and license files. CMake doesn't provide a way to include these files. This is being tracked by issue &lt;a class="reference external" href="https://gitlab.kitware.com/cmake/cmake/-/issues/21832"&gt;#21832&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;While packaging the symbolic links may or may not be dereferenced and hence results in copying the folder too in the target directory.&lt;/li&gt;
&lt;li&gt;Running tests locally may require switching to &lt;code&gt;fossy&lt;/code&gt; user.&lt;/li&gt;
&lt;li&gt;While configured for testing, it may give permission errors.&lt;/li&gt;
&lt;li&gt;Scheduler, Ununpack, and Delagent unit and functional tests are not working. I have added an issue &lt;a class="reference external" href="https://github.com/fossology/fossology/issues/2084"&gt;#2084&lt;/a&gt; to track the progress on fixing these tests.&lt;/li&gt;
&lt;li&gt;CMake doesn't generate uninstall targets. The closest thing to uninstall is &lt;a class="reference external" href="https://gitlab.kitware.com/cmake/community/-/wikis/FAQ#can-i-do-make-uninstall-with-cmake"&gt;this snippet&lt;/a&gt;. This will be later added to the FOSSology.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges-faced"&gt;
&lt;h2&gt;Challenges Faced&lt;/h2&gt;
&lt;p&gt;While this whole project was challenging, some aspects of it were unforeseen and more challenging. When I decided to go on with this project I just had enough CMake knowledge to write a configuration for a very small project. I had never used CMake on this big scale. On the other side, the FOSSology community is largely unknown to CMake so for all of us it was learned, practiced, and implement. With support from mentors, I was able to overcome this challenge with flying colors.&lt;/p&gt;
&lt;p&gt;The other challenge was to understand the old build system, how they are all connected and what is the flow. The complexity can be imagined by the fact that the most of code and configurations were written in the decade before the last decade and haven't changed much since then.&lt;/p&gt;
&lt;p&gt;The most challenging task was to make tests work with the new build system. Since tests were mostly hardcoded and the new build system refactored many of the files and directory, the tests were failing initially. The testing part took me the most time. All thanks to my mentor Gaurav and my friend Sarita I was able to hack them to suit the new build system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="related-resources-and-links"&gt;
&lt;h2&gt;Related Resources and Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix FOSSology agent tests issue &lt;a class="reference external" href="https://github.com/fossology/fossology/issues/2084"&gt;#2084&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(CI): Migrate API docs generation and deployment to GitHub Actions pull request &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/1917"&gt;#1917&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(CI): Migrate Static Checks and Analysis to GitHub Actions from Travis CI &lt;a class="reference external" href="https://github.com/fossology/fossology/pull/1919"&gt;#1919&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future-development-plans"&gt;
&lt;h2&gt;Future Development Plans&lt;/h2&gt;
&lt;p&gt;There is a lot to do with the new build system and CI and it will probably take a year or to reach a maturity point. I was able to meet most of the goals but some of them are remaining.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fix the tests, probably renovate them from the ground up.&lt;/li&gt;
&lt;li&gt;Find a hack for packaging problems.&lt;/li&gt;
&lt;li&gt;Improve and optimize the build.&lt;/li&gt;
&lt;li&gt;Modernise the source code, remove old, bloated code and replace them according to new standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-i-learn-from-this-project"&gt;
&lt;h2&gt;What did I learn from this project?&lt;/h2&gt;
&lt;p&gt;This Google Summer of Code was the busiest time of my life for all good reasons. I learned a lot about license compliance and how it all works in the software industry. The next big thing is CMake. As I mentioned I was just a novice user of CMake. Now I am confident that given any other large project I will be able to migrate it/improve it. I got to learn PHP, of which I did not know a single word before GSoC. And finally, I learned about packing and testing. I had these courses but implementing them myself and fixing them was a wholesome experience.&lt;/p&gt;
&lt;p&gt;Other than that I improved on my communication and presentation skills. Collaborating with fellow participants was one of the great things that happened during GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgments"&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Google Summer of Code is the best thing that has happened to me this year so far. Although there are numerous people to say thanks to, I want to mention key people who were my motivation and support during this period.&lt;/p&gt;
&lt;p&gt;First of all, I want to thank and appreciate my mentors &lt;a class="reference external" href="https://github.com/GMishx"&gt;Gaurav Mishra&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/mcjaeger"&gt;Michael C. Jaeger&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ag4ums"&gt;Anupam Ghosh&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/shaheemazmalmmd"&gt;Shaheem Azmal M MD&lt;/a&gt;. Without the help and support from them, all this would not have been possible. They are very polite, knowledgeable, and helpful.&lt;/p&gt;
&lt;p&gt;I want to thank my friend and &lt;abbr title="Integrating ScanCode Toolkit to FOSSology"&gt;fellow participant&lt;/abbr&gt; &lt;a class="reference external" href="https://github.com/itssingh"&gt;Sarita&lt;/a&gt;. Thank you for being a collaborator, support, and motivation for attempting GSoC.&lt;/p&gt;
&lt;p&gt;Finally, I want to thank, my family and friends. I got to meet many awesome developers as my fellow participants from around the world, I wish we will do more collaboration in the future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="report"></category><category term="gsoc"></category><category term="FOSSology"></category></entry></feed>